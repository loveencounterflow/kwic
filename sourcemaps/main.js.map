{"version":3,"sources":["main.coffee"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\n# njs_util                  = require 'util'\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'kwic'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n# after                     = suspend.after\n# eventually                = suspend.eventually\n# immediately               = suspend.immediately\n# every                     = suspend.every\nTEXT                      = require 'coffeenode-text'\nLODASH                    = CND.LODASH\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new_kwic = ( settings ) ->\n  factorizer  = settings?[ 'factorizer' ] ? null\n  alphabet    = settings?[ 'alphabet'   ] ? null\n  #.........................................................................................................\n  R =\n    '~isa':               'KWIC/base'\n    'entries':            null\n    'length':             0\n    'entries':            []\n    'factors':            null\n    'factorizer':         factorizer\n    'alphabet':           alphabet\n    'weights':            null\n    'normalize-lengths':  true\n    'max-length':         -Infinity\n    'is-positioned':      false\n  #.........................................................................................................\n  if ( entries = settings?[ 'entries' ] )?\n    @add R, entry for entry in entries\n    if alphabet?\n      @factorize\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@filler = Symbol '-'\n\n#-----------------------------------------------------------------------------------------------------------\n@add = ( me, entry ) ->\n  ### TAINT consider to update or delete factors instead ###\n  throw new Error \"unable to add entries after factorization\" if me[ 'factors' ]?\n  ( me[ 'entries' ]?= [] ).push entry\n  me[ 'length' ] += +1\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@factorize = ( me, factorizer = null ) ->\n  ### TAINT consider to update or delete factors instead ###\n  throw new Error \"unable to factorize another time\" if me[ 'factors' ]?\n  me[ 'factors' ]   = []\n  factorizer       ?= @_get_factorizer me, factorizer\n  for entry in me[ 'entries' ]\n    me[ 'factors' ].push factor_list = factorizer entry\n    me[ 'max-length' ]  = Math.max me[ 'max-length' ], facl\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_factorizer = ( me, factorizer = null ) ->\n  factorizer ?= me[ 'factorizer' ] ? 'characters'\n  switch type = CND.type_of factorizer\n    when 'function'\n      R = factorizer\n    when 'text'\n      R = @factorizers[ factorizer ]\n      throw new Error \"unknown factorizer name #{rpr factorizer}\" unless R?\n    else\n      throw new Error \"illegal factorizer type #{rpr type}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@add_weights = ( me, alphabet = null ) ->\n  ### TAINT consider to factorize transparently ###\n  throw new Error \"unable to add weights before factorization\" unless me[ 'factors' ]?\n  ### TAINT consider to update or delete weights instead ###\n  throw new Error \"unable to factorize another time\" if me[ 'weights' ]?\n  weighter          = @_get_weighter me, alphabet\n  me[ 'weights' ]   = []\n  for factor_list in me[ 'factors' ]\n    me[ 'weights' ].push ( weighter factor for factor in factor_list )\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_weighter = ( me, alphabet = null ) ->\n  alphabet ?= me[ 'alphabet' ] ? 'unicode'\n  switch type = CND.type_of alphabet\n    when 'function'\n      R = alphabet\n    when 'text'\n      R = @alphabets[ alphabet ]\n      throw new Error \"unknown alphabet name #{rpr alphabet}\" unless R?\n    when 'list'\n      alphabet_pod = {}\n      do -> alphabet_pod[ factor ] = idx for factor, idx in alphabet\n      ### TAINT consider to throw error for unknown symbols ###\n      R = ( factor ) -> alphabet[ factor ] ? Infinity\n    else\n      throw new Error \"illegal alphabet type #{rpr type}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@add_positions = ( me, positioner = null ) ->\n  ### TAINT consider to update or delete factors instead ###\n  throw new Error \"unable to position another time\" if me[ 'is-positioned' ]\n  throw new Error \"must first add weights\" unless me[ 'weights' ]?\n  positioner       ?= @_get_positioner me, positioner\n  for weights_list in me[ 'weights' ]\n    for weight, idx in weights_list\n      xxx\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_positioner = ( me, positioner = null ) ->\n  positioner ?= me[ 'positioner' ] ? 'characters'\n  switch type = CND.type_of positioner\n    when 'function'\n      R = positioner\n    when 'text'\n      R = @positioners[ positioner ]\n      throw new Error \"unknown positioner name #{rpr positioner}\" unless R?\n    else\n      throw new Error \"illegal positioner type #{rpr type}\"\n  return R\n\n\n#===========================================================================================================\n# FACTORIZERS AND ALPHABETS\n#-----------------------------------------------------------------------------------------------------------\n@factorizers = {\n  'characters':       TEXT.split.bind TEXT\n  }\n\n#-----------------------------------------------------------------------------------------------------------\n@alphabets = {\n  'unicode':          ( factor ) -> factor.codePointAt 0\n  }\n\n\n###\nentries\nentries (what is being indexed)\nalphabet (what is used to index)\n###\n\n"]}