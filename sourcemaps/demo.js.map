{"version":3,"sources":["demo.coffee"],"names":[],"mappings":"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","file":"demo.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\n# njs_util                  = require 'util'\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'KWIC/demo'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n# after                     = suspend.after\n# eventually                = suspend.eventually\n# immediately               = suspend.immediately\n# every                     = suspend.every\n# TEXT                      = require 'coffeenode-text'\nLODASH                    = CND.LODASH\n#...........................................................................................................\nKWIC                      = require './main'\nCODEC                     = require 'hollerith-codec'\n\n\n# text = \"\"\"a tram also known as tramcar and in north america known as streetcar trolley or trolley car\n# is a rail vehicle which runs on tracks along public urban streets called street running and also\n# sometimes on separate rights of way the lines or networks operated by tramcars are called tramways\n# tramways powered by electricity which were the most common type historically were once called electric\n# street railways however trams were widely used in urban areas before the universal adoption of\n# electrification and thus the other methods of powering trams is listed below under history\n\n# tram lines may also run between cities and or towns for example interurbans tram train and or partially\n# grade separated even in the cities light rail very occasionally trams also carry freight tram vehicles\n# are usually lighter and shorter than conventional trains and rapid transit trains but the size of trams\n# particularly light rail vehicles is rapidly increasing some trams for instance tram trains may also run\n# on ordinary railway tracks a tramway may be upgraded to a light rail or a rapid transit line two urban\n# tramways may be connected to an interurban etc\n\n# for all these reasons the differences between the various modes of rail transportation are often\n# indistinct\n\n# today most trams use electrical power usually fed by an overhead pantograph in some cases by a sliding\n# shoe on a third rail trolley pole or bow collector if necessary they may have dual power systems\n# electricity in city streets and diesel in more rural environments\n\n# in the united states the term tram has sometimes been used for rubber tired trackless trains which are not\n# related to the other vehicles covered in this article\n# a b c d e f g h i j k l m n o p q r s t u v w x y z\n# call\n# \"\"\"\n\n# # text = \"\"\"a e costarica america abcde acute ab ac ad\"\"\"\n# text = \"\"\"\n# abcd\n# abdc\n# acbd\n# acdb\n# adbc\n# adcb\n# bacd\n# badc\n# bcad\n# bcda\n# bdac\n# bdca\n# cabd\n# cadb\n# cbad\n# cbda\n# cdab\n# cdba\n# dabc\n# dacb\n# dbac\n# dbca\n# dcab\n# dcba\n# a b c ab ac ba bc ca cb abc acb cab cba bac bca cad cabs cabdriver\"\"\"\n\n\n\n# text = ( require 'fs' ).readFileSync '/Volumes/Storage/io/wordlists/top10000de.txt', 'utf-8'\n# text = text.replace /^#.*/, ''\n# text = text.toLowerCase()\n# lines = text.split '\\n'\n# lines = ( line for line in lines when not ( /^\\s*#/ ).test line )\n# text = lines.join ' '\n\n# text = \"\"\"a b c ab ac\"\"\"\n\n# text = \"\"\"\n# all\n# call\n# called\n# usually\n# partially\n# partiallys\n# historically\n# xxxxxxxcally\n# xxxxxxxcallx\n# xxxxxxcallx\n# occasionally\n# along\n# also\n# \"\"\"\n\ntexts =\n  trains: \"\"\"\n    gleis-drei-eck\n    ei-sen-bahn\n    mo-dell-bahn\n    bahn-mo-dell\n    gleis-bau\n    drei-eck\n    bahn-gleis\n    gleis\n    bahn-schran-ke\n    bahn-hof\n    neben-bahn\n    klein-bahn\n    auto-bahn\n    auto-fahrt\n    auto-fahr-er\n    bahn-fahr-kar-te\n    bahn-fahrt\n    zug-fahrt\n    bahn-fahr-er\n    auto-zug\n    \"\"\"\n\n#-----------------------------------------------------------------------------------------------------------\nunique_words_from_text = ( text ) ->\n  words = text.split /\\s+/\n  words = ( word for word in words when word.length > 0 )\n  words.sort()\n  return LODASH.uniq words, true\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  # text        = \"\"\"a b c ab ac ba bc ca cb abc acb cab cba bac bca cad cabs cabdriver\"\"\"\n  text        = texts[ 'trains' ]\n  text        = text.replace /-/g, ''\n  entries     = unique_words_from_text text\n  collection  = []\n  for entry in entries\n    factors       = KWIC.get_factors      entry\n    weights       = KWIC.get_weights      factors\n    permutations  = KWIC.get_permutations factors, weights\n    collection.push [ permutations, entry, ]\n    for permutation in permutations\n      # debug '©uhwuc', permutation, entry\n      [ r_weights, infix, suffix, prefix, ] = permutation\n  KWIC.report collection\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_2 = ->\n  text        = texts[ 'trains' ]\n  entries     = unique_words_from_text text\n  collection  = []\n  for entry in entries\n    factors       = KWIC.get_factors entry, ( text ) ->\n      return ( \"(#{part})\" for part in text.split '-' )\n    weights       = KWIC.get_weights factors, ( factor ) ->\n      chrs = Array.from factor\n      chrs = chrs[ 1 ... chrs.length - 1 ]\n      return ( chr.codePointAt 0 for chr in chrs )\n    # debug '©GFNKC', weights\n    permutations  = KWIC.get_permutations factors, weights\n    display       = entry.replace /-/g, ''\n    collection.push [ permutations, display, ]\n    # for permutation in permutations\n    #   [ r_weights, infix, suffix, prefix, ] = permutation\n  KWIC.report collection\n\n\n############################################################################################################\nunless module.parent?\n  demo_1()\n  demo_2()\n\n\n  # echo()\n  # entries     = unique_words_from_text text\n  # collection  = []\n  # for entry in entries\n  #   collection.push [ ( KWIC.permute entry ), entry, ]\n  # KWIC.report collection\n  # debug '©BX7Tw', CODEC[ 'keys' ][ 'lo' ]\n\n  # demo_permute = ->\n  #   d   = [ 'a', 'b', 'c', 'd', ]\n  #   nr  = 0\n  #   loop\n  #     nr += +1\n  #     help nr, d.join ''\n  #     break unless CND.ez_permute d\n  # demo_permute()\n\n\n\n\n\n\n\n\n"]}