{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B,OAP5B;;;;;;EAYA,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B,EAZ5B;;;EAcA,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAf5B;;;EAiBA,KAAA,GAA4B,OAAA,CAAQ,iBAAR,EAjB5B;;;EAqBA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAE,KAAF,EAAS,aAAa,YAAtB,CAAA;IACb,UAAA,GAAa,IAAC,CAAA,eAAD,CAAiB,UAAjB;AACb,WAAO,UAAA,CAAW,KAAX;EAFM,EArBf;;;EA0BA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAE,aAAa,YAAf,CAAA;AACjB,QAAA;AAAA,YAAO,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,UAAZ,CAAd;AAAA,WACO,UADP;QAEI,CAAA,GAAI;AADD;AADP,WAGO,MAHP;QAII,CAAA,GAAI,IAAC,CAAA,WAAa,CAAA,UAAA;QAClB,IAAmE,SAAnE;UAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,wBAAA,CAAA,CAA2B,GAAA,CAAI,UAAJ,CAA3B,CAAA,CAAV,EAAN;;AAFG;AAHP;QAOI,MAAM,IAAI,KAAJ,CAAU,CAAA,wBAAA,CAAA,CAA2B,GAAA,CAAI,IAAJ,CAA3B,CAAA,CAAV;AAPV;AAQA,WAAO;EATU,EA1BnB;;;EAsCA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAE,OAAF,EAAW,WAAW,SAAtB,CAAA;AACb,QAAA;IAAA,QAAA,GAAY,IAAC,CAAA,aAAD,CAAe,QAAf;IACZ,CAAA,GAAY;IACZ,KAAA,yCAAA;;MACE,CAAC,CAAC,IAAF,CAAO,MAAA,GAAS,QAAA,CAAS,MAAT,CAAhB;MACA,IAA2D,MAAA,KAAU,MAArE;QAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,wBAAA,CAAA,CAA2B,GAAA,CAAI,MAAJ,CAA3B,CAAA,CAAV,EAAN;;IAFF;AAGA,WAAO;EANM,EAtCf;;;EA+CA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAE,WAAW,SAAb,CAAA;AACf,QAAA;AAAA,YAAO,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,QAAZ,CAAd;;AAAA,WAEO,UAFP;QAGI,CAAA,GAAI;AADD;;AAFP,WAKO,MALP;QAMI,CAAA,GAAI,IAAC,CAAA,SAAW,CAAA,QAAA;QAChB,IAA+D,SAA/D;UAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,sBAAA,CAAA,CAAyB,GAAA,CAAI,QAAJ,CAAzB,CAAA,CAAV,EAAN;;AAFG;;AALP,WASO,MATP;QAUI,YAAA,GAAe,CAAA;QACZ,CAAA,QAAA,CAAA,CAAA;AAAG,cAAA;AAAA;UAAA,KAAA,sDAAA;;yBAAA,YAAc,CAAA,MAAA,CAAd,GAAyB;UAAzB,CAAA;;QAAH,CAAA,CAAH,CAAA;QACA,CAAA,GAAI,QAAA,CAAE,MAAF,CAAA;iBAAc,QAAU,CAAA,MAAA;QAAxB;AAHD;AATP;;QAeI,MAAM,IAAI,KAAJ,CAAU,CAAA,sBAAA,CAAA,CAAyB,GAAA,CAAI,IAAJ,CAAzB,CAAA,CAAV;AAfV,KAAA;;AAiBA,WAAO;EAlBQ,EA/CjB;;;EAoEA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,OAAF,EAAW,OAAX,EAAoB,OAAO,MAA3B,CAAA;AAClB,QAAA;IAAA,CAAA,GAAI;IACJ,IAAe,IAAA,KAAQ,MAAvB;MAAA,IAAA,GAAO,KAAP;KADA;;IAGA,OAAA,GAAoB,OAAS;IAC7B,iBAAA,GAAoB,OAAO,CAAC;IAC5B,OAAO,CAAC,IAAR,CAAa,IAAb;IACA,KAAiB,0GAAjB;MACE,MAAA,GAAY,OAAS;MACrB,KAAA,GAAY,OAAS,CAAA,SAAA;MACrB,MAAA,GAAY,OAAS,sBAFrB;;;;MAMA,KAAA,GAAY,iBAAA,GAAoB;MAChC,SAAA,GAAY,OAAS,4BAAU,CAAC,MAApB,CAA2B,OAAS,iBAAc,CAAC,OAAxB,CAAA,CAA3B;MACZ,CAAC,CAAC,IAAF,CAAO,CAAE,SAAF,EAAa,KAAb,EAAoB,MAApB,EAA4B,MAA5B,CAAP,EARA;;;MAWA,IAAC,CAAA,YAAD,CAAc,OAAd;IAZF,CANA;;AAoBA,WAAO;EArBW,EApEpB;;;EA4FA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,KAAF,EAAS,QAAT,CAAA;AACT,QAAA;IAAA,UAAA,8EAA0C;IAC1C,QAAA,8EAA0C;IAC1C,IAAA,0EAA0C;IAC1C,OAAA,GAAc,IAAC,CAAA,WAAD,CAAe,KAAf,EAAwB,UAAxB;IACd,OAAA,GAAc,IAAC,CAAA,WAAD,CAAe,OAAf,EAAwB,QAAxB;AACd,WAAO,IAAC,CAAA,gBAAD,CAAkB,OAAlB,EAA2B,OAA3B,EAAoC,IAApC;EANE,EA5FX;;;EAqGA,IAAC,CAAA,IAAD,GAAQ,QAAA,CAAE,UAAF,CAAA;AACN,QAAA;IAAA,MAAA,GAAS,GAAT;;IAEA,KAAA,4CAAA;MAAI,CAAE,YAAF,EAAgB,KAAhB;MACF,KAAA,gDAAA;;QACE,IAAA,GAAO,KAAK,CAAC,MAAN,CAAa,GAAb;QACP,MAAM,CAAC,IAAP,CAAY,CAAE,IAAF,EAAQ,GAAR,EAAa,KAAb,CAAZ;MAFF;IADF;IAIA,MAAM,CAAC,IAAP,CAAY,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;aAAY,CAAG,CAAA,CAAA,CAAG,CAAC,OAAP,CAAe,CAAG,CAAA,CAAA,CAAlB;IAAZ,CAAZ;AAEA;;AAAS;MAAA,KAAA,0CAAA;QAAsC,CAAE,CAAF,EAAK,CAAE,CAAF,EAAK,KAAL,EAAY,MAAZ,EAAoB,MAApB,CAAL,EAAoC,KAApC,cAAtC;;qBAAA,CAAE,MAAF,EAAU,KAAV,EAAiB,MAAjB,EAAyB,KAAzB;MAAA,CAAA;;;EATH,EArGR;;;EAiHA,IAAC,CAAA,MAAD,GAAU,QAAA,CAAE,UAAF,EAAc,QAAd,CAAA;AACR,QAAA;IAAA,MAAA,0EAAuC;IACvC,SAAA,+EAAuC;IACvC,MAAA,4EAAuC;IACvC,IAAA,GAAe,OAAO,CAAC,MAAM,CAAC,KAAlB,GAA6B,IAA7B,GAAuC,KAHnD;;IAKA,mBAAA,GAAsB,IAAC,CAAA,IAAD,CAAM,UAAN,EALtB;;IAOA,UAAA,GAAa,CAAC;IACd,KAAA,qDAAA;MAAI,CAAE,MAAF,EAAU,KAAV,EAAiB,MAAjB,EAAyB,KAAzB;MACF,MAAA,GAAc,KAAK,CAAC;MACpB,KAAA,0CAAA;;QAAA,MAAA,IAAc,IAAI,CAAC;MAAnB;MACA,UAAA,GAAc,IAAI,CAAC,GAAL,CAAS,UAAT,EAAqB,MAArB;IAHhB,CARA;;IAaA,KAAA,uDAAA;MAAI,CAAE,MAAF,EAAU,KAAV,EAAiB,MAAjB,EAAyB,KAAzB;MACF,MAAA,GAAgB,MAAQ;MACxB,MAAA,GAAgB,MAAQ;MACxB,aAAA,GAAgB;MAAG,KAAA,0CAAA;;QAAA,aAAA,IAAiB,IAAI,CAAC;MAAtB;MACnB,aAAA,GAAgB;MAAG,KAAA,0CAAA;;QAAA,aAAA,IAAiB,IAAI,CAAC;MAAtB;MACnB,KAA+B,mEAA/B;QAAA,MAAM,CAAC,OAAP,CAAe,MAAf;MAAA;MAEA,KAA+B,oFAA/B,GAAA;;QAAA,MAAM,CAAC,IAAP,CAAe,MAAf;MAAA;MACA,MAAA,GAAY,MAAM,CAAC,IAAP,CAAY,MAAZ;MACZ,MAAA,GAAY,MAAM,CAAC,IAAP,CAAY,MAAZ;MACZ,KAAA,GAAe,GAAG,CAAC,QAAJ,CAAa,KAAb,CAAH,GAA2B,KAA3B,GAAsC,GAAA,CAAI,KAAJ;MAClD,IAAA,CAAK,MAAA,GAAS,SAAT,GAAqB,KAArB,GAA6B,MAA7B,GAAsC,MAAtC,GAA+C,KAApD;IAXF,CAbA;;AA0BA,WAAO;EA3BC,EAjHV;;;;;EAkJA,IAAC,CAAA,WAAD,GAAe;IACb,YAAA,EAAoB,QAAA,CAAE,IAAF,CAAA;aAAY,KAAK,CAAC,IAAN,CAAW,IAAX;IAAZ,CADP;IAEb,WAAA,EAAoB,QAAA,CAAE,IAAF,CAAA;aAAY,IAAI,CAAC,KAAL,CAAW,GAAX;IAAZ;EAFP,EAlJf;;;EAwJA,IAAC,CAAA,SAAD,GAAa;IACX,SAAA,EAAoB,QAAA,CAAE,MAAF,CAAA;aAAc,MAAM,CAAC,WAAP,CAAmB,CAAnB;IAAd;EADT,EAxJb;;;;;EAgKA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAE,IAAF,CAAA;IACd,IAAe,IAAI,CAAC,MAAL,GAAc,CAA7B;AAAA,aAAO,KAAP;;IACA,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,KAAL,CAAA,CAAV;AACA,WAAO;EAHO;;EAhKhB;;;;;AAAA",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'KWIC'\n# log                       = CND.get_logger 'plain',     badge\n# info                      = CND.get_logger 'info',      badge\n# whisper                   = CND.get_logger 'whisper',   badge\n# alert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\n# warn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nCODEC                     = require 'hollerith-codec'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_factors = ( entry, factorizer = 'characters' ) ->\n  factorizer = @_get_factorizer factorizer\n  return factorizer entry\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_factorizer = ( factorizer = 'characters' ) ->\n  switch type = CND.type_of factorizer\n    when 'function'\n      R = factorizer\n    when 'text'\n      R = @factorizers[ factorizer ]\n      throw new Error \"unknown factorizer name #{rpr factorizer}\" unless R?\n    else\n      throw new Error \"illegal factorizer type #{rpr type}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_weights = ( factors, alphabet = 'unicode' ) ->\n  weighter  = @_get_weighter alphabet\n  R         = []\n  for factor in factors\n    R.push weight = weighter factor\n    throw new Error \"factor not in alphabet: #{rpr factor}\" if weight is undefined\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_weighter = ( alphabet = 'unicode' ) ->\n  switch type = CND.type_of alphabet\n    #.......................................................................................................\n    when 'function'\n      R = alphabet\n    #.......................................................................................................\n    when 'text'\n      R = @alphabets[ alphabet ]\n      throw new Error \"unknown alphabet name #{rpr alphabet}\" unless R?\n    #.......................................................................................................\n    when 'list'\n      alphabet_pod = {}\n      do -> alphabet_pod[ factor ] = idx for factor, idx in alphabet\n      R = ( factor ) -> alphabet[ factor ]\n    #.......................................................................................................\n    else\n      throw new Error \"illegal alphabet type #{rpr type}\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_permutations = ( factors, weights, zero = undefined ) ->\n  R = []\n  zero = null if zero is undefined\n  #.........................................................................................................\n  weights           = weights[ .. ]\n  permutation_count = weights.length\n  weights.push zero\n  for infix_idx in [ 0 ... permutation_count ]\n    prefix    = factors[ ... infix_idx ]\n    infix     = factors[ infix_idx ]\n    suffix    = factors[ infix_idx + 1 .. ]\n    ### Here we reverse the order of weights in the 'suffix' part of the weights (the part that comes\n    behind the guard value); this means that both prefix and suffix weights that are closer to the\n    infix have a stronger influence on the sorting than those that are farther away. ###\n    r_idx     = permutation_count - infix_idx\n    r_weights = weights[ .. r_idx ].concat weights[ r_idx + 1 .. ].reverse()\n    R.push [ r_weights, infix, suffix, prefix, ]\n    #.....................................................................................................\n    # weights   = weights[ .. ]\n    @_rotate_left weights\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@permute = ( entry, settings ) ->\n  factorizer  = settings?[ 'factorizer' ] ? undefined\n  alphabet    = settings?[ 'alphabet'   ] ? undefined\n  zero        = settings?[ 'zero'       ] ? undefined\n  factors     = @get_factors   entry,   factorizer\n  weights     = @get_weights   factors, alphabet\n  return @get_permutations factors, weights, zero\n\n#-----------------------------------------------------------------------------------------------------------\n@sort = ( collection ) ->\n  facets = []\n  #.........................................................................................................\n  for [ permutations, entry, ] in collection\n    for key in permutations\n      bkey = CODEC.encode key\n      facets.push [ bkey, key, entry, ]\n  facets.sort ( a, b ) -> a[ 0 ].compare b[ 0 ]\n  #.........................................................................................................\n  return ( [ prefix, infix, suffix, entry, ] for [ _, [ _, infix, suffix, prefix, ], entry, ] in facets )\n\n#-----------------------------------------------------------------------------------------------------------\n@report = ( collection, settings ) ->\n  padder    = settings?[ 'padder'    ] ? ' '\n  separator = settings?[ 'separator' ] ? '|'\n  joiner    = settings?[ 'joiner'    ] ? ''\n  show      = if process.stdout.isTTY then help else echo\n  #.........................................................................................................\n  lineups_and_entries = @sort collection\n  #.........................................................................................................\n  max_length = -Infinity\n  for [ prefix, infix, suffix, entry, ] in lineups_and_entries\n    length      = infix.length\n    length     += part.length for part in prefix\n    max_length  = Math.max max_length, length\n  #.........................................................................................................\n  for [ prefix, infix, suffix, entry, ] in lineups_and_entries\n    prefix        = prefix[ ... ]\n    suffix        = suffix[ ... ]\n    prefix_length = 0; prefix_length += part.length for part in prefix\n    suffix_length = 0; suffix_length += part.length for part in suffix\n    prefix.unshift padder for _ in [ 0 ... max_length - prefix_length ] by +1\n    # debug '©L9201', entry, infix, suffix\n    suffix.push    padder for _ in [ 0 ... max_length - ( suffix_length + infix.length ) ] by +1\n    prefix    = prefix.join joiner\n    suffix    = suffix.join joiner\n    entry     = if CND.isa_text entry then entry else rpr entry\n    show prefix + separator + infix + suffix + padder + entry\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# FACTORIZERS AND ALPHABETS\n#-----------------------------------------------------------------------------------------------------------\n@factorizers = {\n  'characters':       ( text ) -> Array.from text\n  'syllables':        ( text ) -> text.split '-'\n  }\n\n#-----------------------------------------------------------------------------------------------------------\n@alphabets = {\n  'unicode':          ( factor ) -> factor.codePointAt 0\n  }\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@_rotate_left = ( list ) ->\n  return list if list.length < 2\n  list.push list.shift()\n  return list\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_rotate_right = ( list ) ->\n#   return list if list.length < 2\n#   list.unshift list.pop()\n#   return list\n\n"
  ]
}